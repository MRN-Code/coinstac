#!/usr/bin/env node
'use strict';

const assign = require('lodash/assign');
const CoinstacClient = require('../src/index');
const DBRegistry = require('coinstac-common').services.dbRegistry.DBRegistry;
const dropRight = require('lodash/dropRight');
const flatten = require('lodash/flatten');
const glob = require('glob');
const inquirer = require('inquirer');
const last = require('lodash/last');
const path = require('path');
const pkg = require('../package.json');
const pouchDBAdapterMemory = require('pouchdb-adapter-memory');
const program = require('commander');
const Project = require('coinstac-common').models.Project;
const Storage = require('dom-storage');
const url = require('url');
const winston = require('winston');

// PouchDB 5.4.x requires the memory plugin
DBRegistry.Pouchy.plugin(pouchDBAdapterMemory);

/**
 * {@link https://www.npmjs.com/package/winston}
 */
const logger = new winston.Logger({
  level: 'verbose',
  transports: [new winston.transports.Console()],
});

const STORAGE_DIR = path.join(__dirname, '..', '.tmp');

let client;
let username;

function errorHandler(...errors) {
  errors.forEach(error => logger.error(error));
  process.exit(1);
}

process.on('uncaughtException', errorHandler);
process.on('unhandledRejection', (reason, p) => {
  errorHandler('Unhandled Rejection at: Promise ', p, ' reason: ', reason);
});

program
  .version(pkg.version)
  .usage('[options] <file ...>')
  .option('-a --api [value])', 'API connection string')
  .option('-c --consortium [value]', 'Consortium ID')
  .option('-d --database [value]', 'Database connection string')
  .option('-p --password [value]', 'Password')
  .option('-u --username [value]', 'Username')
  .parse(process.argv);

(
  program.password && program.username ?
    Promise.resolve({
      password: program.password,
      username: program.username,
    }) :
    inquirer.prompt([{
      message: 'Username:',
      name: 'username',
    }, {
      message: 'Password:',
      name: 'password',
      type: 'password',
    }])
)
  .then(answers => {
    if (!program.consortium) {
      throw new Error('Consortium ID required');
    }

    if (!answers.password || !answers.username) {
      throw new Error('username and password required');
    }

    const defaultDb = {
      hostname: 'coinstac.mrn.org',
      pathname: '',
      protocol: 'https:',
    };

    const hpConfig = program.api ?
      program.api :
      'https://coins-api.mrn.org/api/v1.3.0';
    const remoteDbConfig = program.database ?
      assign(defaultDb, url.parse(program.database)) :
      defaultDb;

    // TODO: Figure out DBRegistryFactory configuration
    if (
      last(remoteDbConfig.path) === '/' &&
      last(remoteDbConfig.pathname) === '/'
    ) {
      remoteDbConfig.path = dropRight(remoteDbConfig.path, 1).join('');
      remoteDbConfig.pathname = dropRight(remoteDbConfig.pathname, 1).join('');
    }

    client = new CoinstacClient({
      appDirectory: STORAGE_DIR,
      db: {
        local: {
          pouchConfig: {
            adapter: 'memory',
          },
        },
        noURLPrefix: true,
        path: path.join(STORAGE_DIR, 'db'),
        remote: {
          db: remoteDbConfig,
          pouchConfig: {
            adapter: 'memory',
          },
        },
      },
      hp: hpConfig,
      logger: logger, // eslint-disable-line object-shorthand
      storage: new Storage(null, { strict: true }),
    });
    username = answers.username;

    logger.info('Logging in...');

    return client.initialize({
      password: answers.password,
      username: username, // eslint-disable-line object-shorthand
    });
  })
  .then(() => {
    if (!program.args || !program.args.length) {
      return [];
    }

    logger.info('Retrieving files...');

    return Promise.all(program.args.map(dir => {
      return new Promise((resolve, reject) => {
        glob(dir, (error, files) => {
          if (error) {
            reject(error);
          } else {
            resolve(files);
          }
        });
      });
    }))
      .then(flatten)
      .then(client.projects.getFileStats);
  })
  .then(files => {
    logger.info('Saving project...');

    const project = new Project({
      consortiumId: program.consortium,
      files: files, // eslint-disable-line object-shorthand
      name: `${username}'s project`,
    });

    return client.dbRegistry.get('projects').save(project.serialize());
  })
  .then(project => {
    logger.log('Starting computation...');

    return client.computations.kickoff({
      consortiumId: program.consortium,
      projectId: project._id,
    });
  })
  .catch(errorHandler);
