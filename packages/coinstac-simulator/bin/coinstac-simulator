#!/usr/bin/env node

'use strict';

const util = require('util');
const readFile = util.promisify(require('fs').readFile);
const writeFile = util.promisify(require('fs').writeFile);
const program = require('commander');
const inquirer = require('inquirer');
const glob = util.promisify(require('glob'));
const path = require('path');
const blessed = require('blessed');
const bc = require('blessed-contrib');
const winston = require('winston');
const pkg = require('../package.json');

const logger = winston.createLogger({
  level: 'info',
  transports: [
    new winston.transports.Console({ format: winston.format.cli() }),
  ],
});

let DEBUG_MODE = process.execArgv.includes('--inspect-brk=9229');

process.on('unhandledRejection', (error) => {
  logger.error(`unhandledRejection: ${error.stack}`); // eslint-disable-line no-console
  process.exit(1);
});

program
  .version(pkg.version)
  .option('-i, --inputspec [path]', '/path/to/inputSpec, defaults to ./test/inputspec.json, will interactively create one if none found')
  .option('-s, --compspec [path]', '/path/to/compSpec optional, defaults to cwd')
  .option('-c, --clientNumber [number]', 'number of clients, defaults to 1 not included the remote in decentralized mode. In local mode this creates separate runs')
  .option('-d, --directory [path]', ' path to where input, output, and cache is stored. Defaults to ./test/[input|cache|output]')
  .option('-t, --showinput', ' on errors show comp input that computation failed with')
  .option('-e, --debug', ' enter debug mode, displays extra info including input')
  .option('-p, --pipeline [path]', ' give a pipeline file to run a full pipeline from, working dir used is first comp listed')
  .option('-x, --silly', ' enter silly logging, everything in debug mode + even more');

program.on('--help', () => {
  logger.info([ // eslint-disable-line
    '\n',
    '\tTest a computation in a COINSTAC simulated environment.\n\n',
    '\tThe simulator is meant to run in your computation\'s directory',
    '\tand requires a valid compspec and with the specified docker image\n',
    '\tin your docker image library.\n\n',
    '\tIf you do not have an input map for your computation, a prompt will.\n',
    '\tguide you through creating one.\n\n',
    '\tFurther help can be found in the Readme:\n',
    '\thttps://github.com/MRN-Code/coinstac/blob/master/packages/coinstac-simulator/README.md\n\n',
    '\tExample:\n\n',
    '\t  coinstac-sim -i ./inputSpec.json -c 2\n',
  ].join(' '));
});

program.parse(process.argv);

let mode;
const inSpecPath = program.directory ? path.join(program.directory, 'inputspec.json') : path.join('.', 'test', 'inputspec.json');

if (program.debug || program.silly) {
  DEBUG_MODE = true;
  process.LOGLEVEL = program.silly ? 'silly' : 'debug';
  logger.level = process.LOGLEVEL;
} else if (DEBUG_MODE) {
  process.LOGLEVEL = 'debug';
  logger.level = 'debug';
}
// require after LOGLEVEL set
const sim = require('../src/');

let table;
let screen;
let tableData;
if (!DEBUG_MODE) {
  screen = blessed.screen({
    smartCSR: true,
  });

  tableData = [];

  table = bc.table({
    keys: true,
    fg: 'white',
    selectedFg: 'white',
    selectedBg: 'blue',
    interactive: true,
    label: 'Active Run',
    width: '100%',
    height: '100%',
    border: { type: 'line', fg: 'cyan' },
    columnSpacing: 5,
    columnWidth: [12, 12, 30, 6],
  });
}

const pipelineSpecFactory = (inputSpec, mode, comp) => {
  let specMap = Array.isArray(inputSpec) ? inputSpec : [inputSpec];
  const comps = Array.isArray(comp) ? comp : [comp];
  specMap = specMap.map((spec, index) => ({
    controller: { type: mode },
    computations: [comps[index]],
    inputMap: spec,
  }));
  return {
    steps: specMap,
  };
};

let fulfilledPipelineSpec;

if (program.pipeline) {
  fulfilledPipelineSpec = readFile(program.pipeline)
    .then((pipeSpec) => {
      const compSpecs = JSON.parse(pipeSpec);
      const fileProm = compSpecs.reduce((memo, spec, index) => {
        const baseDir = path.dirname(path.resolve(path.dirname(program.pipeline), spec));
        memo.push(Promise.all([
          readFile(path.resolve(baseDir, spec))
            .then(file => JSON.parse(file)).catch(() => {
              throw new Error(`Incorrect json or missing file at ${path.resolve(baseDir, spec)}`);
            }),
          readFile(path.join(baseDir, 'test', index === 0 ? 'inputspec.json' : 'inputspec-pipeline.json'))
            .then(file => JSON.parse(file)).catch(() => {
              throw new Error(`Incorrect json or missing file at ${path.join(baseDir, 'test', index === 0 ? 'inputspec.json' : 'inputspec-pipeline.json')}`);
            }),
        ]));
        return memo;
      }, []);
      return Promise.all(fileProm)
        .then((fileGroups) => {
          // group compspecs and inputspecs into an object we can create pipepecs from
          mode = fileGroups.reduce((memo, fileGroup) => {
            if (fileGroup[0].computation.remote) {
              memo = 'decentralized';
            }
            return memo;
          }, 'local');

          let clientCount;
          const groupedSpecs = fileGroups.reduce((memo, fileGroup, index) => {
            memo.compSpecs.push(fileGroup[0]);
            const inputSpec = Array.isArray(fileGroup[1]) ? fileGroup[1] : [fileGroup[1]];

            clientCount = clientCount || inputSpec.length;
            if (clientCount !== inputSpec.length) throw new Error('Mismached inputspec client count');

            inputSpec.forEach((spec, idx) => {
              if (memo.inputSpecs[idx]) {
                memo.inputSpecs[idx][index] = spec;
              } else {
                memo.inputSpecs[idx] = [spec];
              }
            });

            return memo;
          }, { compSpecs: [], inputSpecs: [] });

          const pipelineSpecs = groupedSpecs.inputSpecs.map((site) => {
            return pipelineSpecFactory(site, mode, groupedSpecs.compSpecs);
          });

          return pipelineSpecs;
        });
    });
} else {
  fulfilledPipelineSpec = Promise.all([
    readFile(program.compspec ? program.compspec : 'compspec.json'),
    readFile(program.inputspec ? program.inputspec : inSpecPath),
  ].map(p => p.catch(error => error)))
    .then((specs) => {
      const comp = JSON.parse(specs[0]);
      mode = comp.computation.remote ? 'decentralized' : 'local';
      /**
       * Create a spec via cmdline if none is given
       * @param  {Object} variable [description]
       * @param  {[type]} key      [description]
       * @return {[type]}          [description]
       */
      const createInputSpec = (variable, key) => {
        return inquirer.prompt({
          type: 'input',
          name: `${key}`,
          message: `Please give a ${variable.type} input for variable: ${key}
        Files can use glob paterns to resolve to multiple file paths from the input dir
        ie: **/*.txt`,
        }).then((value) => {
          return Promise.all([
            variable.type === 'files' ? glob(value[key]) : value[key],
          ]).then((resolvedVal) => {
            const coerce = variable.type === 'number' ? parseFloat(resolvedVal[0]) : resolvedVal[0];
            return {
              [key]: { value: coerce },
            };
          });
        });
      };

      let specProm;
      if (specs[1].code === 'ENOENT') {
        const memo = {};
        specProm = Object.keys(comp.computation.input).reduce((prom, variable) => {
          return prom.then(() => {
            return createInputSpec(comp.computation.input[variable], variable);
          }).then(res => Object.assign(memo, res));
        }, Promise.resolve())
          .then((res) => {
            return inquirer.prompt({
              type: 'confirm',
              name: 'write',
              message: `Write out the input spec just entered? This WILL overwrite any spec in
          ${inSpecPath}`,
            }).then((response) => {
              const prom = Promise.resolve(res);
              if (response.write) {
                prom.then(res => writeFile(inSpecPath, JSON.stringify(res))
                  .then(res => res));
              }
              return prom;
            });
          });
      } else {
        specProm = JSON.parse(specs[1]);
      }

      return Promise.all([specProm])
        .then((inputSpec) => {
          let generatedPipeSpec;
          if (Array.isArray(inputSpec[0])) {
            generatedPipeSpec = inputSpec[0].map(spec => pipelineSpecFactory(spec, mode, comp));
          } else {
            generatedPipeSpec = pipelineSpecFactory(inputSpec[0], mode, comp);
          }

          return generatedPipeSpec;
        });
    });
}

fulfilledPipelineSpec
  .then((pipelineSpec) => {
  /* eslint-disable no-console */
    const count = program.clientNumber ? program.clientNumber // eslint-disable-line no-nested-ternary, max-len
      : (Array.isArray(pipelineSpec) ? pipelineSpec.length : 1); // eslint-disable-line no-nested-ternary, max-len
    logger.debug(`Starting ${mode} simulator run with ${count} client(s)`);
    const simRun = sim.startRun({
      spec: pipelineSpec,
      runMode: mode,
      clientCount: count,
      operatingDirectory: program.directory,
    });

    const updateTable = (node, data) => {
      let foundNode = false;
      let state = data.controllerState ? data.controllerState : 'initializing';
      state = state === 'stopped' ? 'shutting down docker...' : state;

      if (!DEBUG_MODE) {
        tableData.forEach((row, index) => {
          if (row[0] === node) {
            tableData[index] = [
              node,
              data.currentIteration ? data.currentIteration : 'initializing',
              state,
              data.mode,
            ];
            foundNode = true;
          }
        });
        if (!foundNode) {
          tableData.push([
            node,
            data.currentIteration ? data.currentIteration : 'initializing',
            state,
            data.mode,
          ]);
        }

        table.setData({
          headers: ['node', 'iteration', 'state', 'mode'],
          data: tableData,
        });
        screen.render();
      } else {
        logger.debug(`${node} ---- ${JSON.stringify(data)}`);
      }
    };

    if (simRun.pipelines.remote) {
      simRun.pipelines.remote.manager.getPipelineStateListener('simulatorRun')
        .on('update', (data) => {
          updateTable('remote', data);
        });
    }
    simRun.pipelines.locals.forEach((local, index) => {
      local.manager.getPipelineStateListener('simulatorRun').on('update', (data) => {
        updateTable(`local-${index}`, data);
      });
    });

    if (!DEBUG_MODE) {
      screen.key(['escape', 'q', 'C-c'], () => process.exit(0));
      table.focus();

      screen.append(table);
      screen.render();
    }

    return simRun.allResults;
  })
  .then((results) => {
    if (!DEBUG_MODE) {
      screen.destroy();
    }
    logger.info('Simulator run finished');
    if (mode === 'decentralized') {
      logger.info(`Decentralized results:\n ${JSON.stringify(results.remote, null, 2)}`);
    } else {
      logger.info('Local run(s) finished');
      results.locals.forEach((res, idx) => logger.info(`Client ${idx} results:\n${JSON.stringify(res, null, 2)}\n`));
    }
    // TODO: should not be necessary, something is holding the loop up
    process.exit();
  })
  .catch((err) => {
    if (!DEBUG_MODE) {
      screen.destroy();
    }
    logger.error('Simulator run failed!');
    logger.error('Fun error details:\n');
    logger.error(err.stack);
    if (program.showinput || DEBUG_MODE) {
      logger.error('Input given to the comp on failure:\n');
      logger.error(JSON.stringify(err.input));
    }
    process.exit(0);
  });
