#!/usr/bin/env node

'use strict';

const logger = require('../src/services/logger.js');
const pkg = require('../package.json');
const program = require('commander');
const readline = require('readline');
const server = require('../src/index.js');

/**
 * Winston's valid log levels.
 *
 * {@link https://www.npmjs.com/package/winston#logging-levels}
 *
 * @const {string[]}
 */
const VALID_LOG_LEVELS = ['error', 'warn', 'info', 'verbose', 'debug', 'silly'];

const config = {};

let rl;

/**
 * Error handler for server errors, process `uncaughtException`s and
 * process `unhandledRejection`s.
 *
 * @param {Error} error
 * @param {Promise} [promise]
 */
function errorHandler(error, promise) {
  if (typeof promise === 'undefined') {
    logger.error('Server error', error);
  } else {
    logger.error('Server promise rejection', error, promise);
  }

  process.nextTick(() => process.exit(1));
}

process.on('uncaughtException', errorHandler);

process.on('unhandledRejection', errorHandler);

process.on('exit', () => {
  logger.info('Shutting down server…');
});

program
  .version(pkg.version)
  .option('-db, --database [value]', 'Database connection string')
  .option('-l, --loglevel [value]', `Log level ${VALID_LOG_LEVELS.toString()}`)
  .option('-m, --memory', 'Use in-memory database')
  .option('-n --nohang', 'Don\'t hang')
  .option('-s, --seed [value]', 'Seed the consortiameta database');

program.on('--help', () => {
  /* eslint-disable */
  console.log(`  Databases:

    Specify the CouchDB database connection as a URL string:

    $ coinstac-server-core --database http://localhost:5984

    Seeding:

    Pass the '--seed' flag to use the built-in seed documents. You may also pass
    in the path to your custom consortiameta JSON file:

    $ coinstac-server-core --seed ./path/to/my/docs.json
`);
  /* eslint-enable */
});

program.parse(process.argv);

/**
 * Use readline interface to keep the process open.
 * {@link https://nodejs.org/api/readline.html#readline_readline}
 */
if (program.nohang) {
  rl = readline.createInterface({ // eslint-disable-line no-unused-vars
    input: process.stdin,
    output: process.stdout,
  });
}

if (typeof program.database === 'string') {
  config.dbUrl = program.database;
}

if (
  typeof program.loglevel === 'string' &&
  VALID_LOG_LEVELS.indexOf(program.loglevel) > -1
) {
  logger.transports.console.level = program.loglevel;
}

if (program.memory) {
  config.inMemory = true;
}

if (typeof program.seed === 'string') {
  config.seed = program.seed;
}

logger.info('Starting server…');

server.start(config)
  .then(() => {
    logger.info('Server ready');

    if (program.nohang) {
      process.exit();
    }
  })
  .catch(errorHandler);
